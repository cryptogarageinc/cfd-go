name: create-release-upload

on:
  push:
    tags:
      - 'v*'

jobs:
  create_releases:
    name: create-releases
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          prerelease: true
        continue-on-error: true

  upload-object-windows-mingw:
    name: upload-object-win-mingw
    needs: create_releases
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        bin: [gcc, gcc-static]
        include:
          - bin: gcc
            shared: on
            generator: MSYS Makefiles
          - bin: gcc-static
            shared: off
            generator: MSYS Makefiles

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        shell: bash
      - name: dump version
        env:
          version: ${{ steps.get_version.outputs.VERSION }}
        run: echo "version=${version}"
        shell: bash
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-win-${{ matrix.bin }}-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: create folder
        run: mkdir dist
      - name: cmake-build
        run: |
          cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release -DENABLE_SHARED=${{ matrix.shared }} -DENABLE_CAPI=on -DENABLE_TESTS=off -DENABLE_JS_WRAPPER=off -DCMAKE_INSTALL_PREFIX="./dist"
          cmake --build build --parallel 2 --config Release
        timeout-minutes: 20
      - name: cmake-install
        run: |
          cmake --install build
          cd dist
          del /F /Q cmake\wallycore-*
          del /F /Q lib\wallycore.*
          del /F /Q lib\libwallycore.*
          del /F /Q lib\pkgconfig\wallycore.pc
        shell: cmd
      - name: create archive file
        run: |
          cd dist
          Compress-Archive -Path ./* -DestinationPath ../${{ steps.asset_name.outputs.ASSET_NAME }}
          cd ..
          echo "---- dump zip file ----"
          dir .
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-ubuntu:
    name: upload-object-ubuntu
    needs: create_releases
    runs-on: ubuntu-${{ matrix.os_ver }}.04
    strategy:
      fail-fast: false
      matrix:
        os_ver: [22, 20]
        bin: [gcc, gcc-static]
        include:
          - bin: gcc
            shared: on
          - bin: gcc-static
            shared: off

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-ubuntu${{ matrix.os_ver }}04-${{ matrix.bin }}-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: cmake-build
        run: |
          mkdir dist
          mkdir build
          cd build
          cmake .. -DENABLE_SHARED=${{ matrix.shared }} -DENABLE_TESTS=off -DENABLE_JS_WRAPPER=off -DCMAKE_BUILD_TYPE=Release -DTARGET_RPATH="/usr/local/lib"
          cd ..
          cmake --build build --parallel 2 --config Release
          cd build
          sudo make install DESTDIR=../dist
          cd ..
        timeout-minutes: 20
      - name: create archive file
        run: |
          cd dist
          zip -r ../${{ steps.asset_name.outputs.ASSET_NAME }} usr
          echo "---- dump zip file ----"
          ls -l
      - name: go test
        run: |
          sudo unzip -q ./dist/cfd.zip -d /
          LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib" go test
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-alpine-3-15:
    name: upload-object-alpine-3.15
    needs: create_releases
    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-alpine-3.15-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: list
        run: ls -a $GITHUB_WORKSPACE
      - name: docker setup
        uses: docker://alpine:3.15
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
      - name: create archive file
        run: |
          echo "---- dump output data ----"
          ls -l $GITHUB_WORKSPACE/dist/usr/local/*
          mkdir -p /tmp/cfd
          sudo chmod 777 /tmp/cfd
          sudo chown runner /tmp/cfd
          sudo cp -r $GITHUB_WORKSPACE/dist/usr /tmp/cfd
          cd /tmp/cfd
          sudo zip -r /tmp/cfd/cfd.zip usr
          sudo chmod 777 /tmp/cfd/cfd.zip
          sudo chown runner /tmp/cfd/cfd.zip
          sudo cp -rp /tmp/cfd/cfd.zip $GITHUB_WORKSPACE/dist/cfd.zip
          echo "---- dump zip file ----"
          sudo ls -l /tmp/cfd
      - name: pre-release-test
        uses: docker://golang:1.18-alpine3.15
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_test_entrypoint.sh
      - name: rename asset
        run: mv /tmp/cfd/cfd.zip ${{ steps.asset_name.outputs.ASSET_NAME }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-alpine-3-16:
    name: upload-object-alpine-3.16
    needs: create_releases
    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-alpine-3.16-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: list
        run: ls -a $GITHUB_WORKSPACE
      - name: docker setup
        uses: docker://alpine:3.16
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
      - name: create archive file
        run: |
          echo "---- dump output data ----"
          ls -l $GITHUB_WORKSPACE/dist/usr/local/*
          mkdir -p /tmp/cfd
          sudo chmod 777 /tmp/cfd
          sudo chown runner /tmp/cfd
          sudo cp -r $GITHUB_WORKSPACE/dist/usr /tmp/cfd
          cd /tmp/cfd
          sudo zip -r /tmp/cfd/cfd.zip usr
          sudo chmod 777 /tmp/cfd/cfd.zip
          sudo chown runner /tmp/cfd/cfd.zip
          sudo cp -rp /tmp/cfd/cfd.zip $GITHUB_WORKSPACE/dist/cfd.zip
          echo "---- dump zip file ----"
          sudo ls -l /tmp/cfd
      - name: pre-release-test
        uses: docker://golang:1.18-alpine3.16
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_test_entrypoint.sh
      - name: rename asset
        run: mv /tmp/cfd/cfd.zip ${{ steps.asset_name.outputs.ASSET_NAME }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-alpine-3-17:
    name: upload-object-alpine-3.17
    needs: create_releases
    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-alpine-3.17-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: list
        run: ls -a $GITHUB_WORKSPACE
      - name: docker setup
        uses: docker://alpine:3.17
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
      - name: create archive file
        run: |
          echo "---- dump output data ----"
          ls -l $GITHUB_WORKSPACE/dist/usr/local/*
          mkdir -p /tmp/cfd
          sudo chmod 777 /tmp/cfd
          sudo chown runner /tmp/cfd
          sudo cp -r $GITHUB_WORKSPACE/dist/usr /tmp/cfd
          cd /tmp/cfd
          sudo zip -r /tmp/cfd/cfd.zip usr
          sudo chmod 777 /tmp/cfd/cfd.zip
          sudo chown runner /tmp/cfd/cfd.zip
          sudo cp -rp /tmp/cfd/cfd.zip $GITHUB_WORKSPACE/dist/cfd.zip
          echo "---- dump zip file ----"
          sudo ls -l /tmp/cfd
      - name: pre-release-test
        uses: docker://golang:1.19-alpine3.17
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_test_entrypoint.sh
      - name: rename asset
        run: mv /tmp/cfd/cfd.zip ${{ steps.asset_name.outputs.ASSET_NAME }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-alpine-3-18:
    name: upload-object-alpine-3.18
    needs: create_releases
    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-alpine-3.18-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: list
        run: ls -a $GITHUB_WORKSPACE
      - name: docker setup
        uses: docker://alpine:3.18
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
      - name: create archive file
        run: |
          echo "---- dump output data ----"
          ls -l $GITHUB_WORKSPACE/dist/usr/local/*
          mkdir -p /tmp/cfd
          sudo chmod 777 /tmp/cfd
          sudo chown runner /tmp/cfd
          sudo cp -r $GITHUB_WORKSPACE/dist/usr /tmp/cfd
          cd /tmp/cfd
          sudo zip -r /tmp/cfd/cfd.zip usr
          sudo chmod 777 /tmp/cfd/cfd.zip
          sudo chown runner /tmp/cfd/cfd.zip
          sudo cp -rp /tmp/cfd/cfd.zip $GITHUB_WORKSPACE/dist/cfd.zip
          echo "---- dump zip file ----"
          sudo ls -l /tmp/cfd
      - name: pre-release-test
        uses: docker://golang:1.21-alpine3.18
        with:
          entrypoint: /github/workspace/.github/workflows/docker/alpine_test_entrypoint.sh
      - name: rename asset
        run: mv /tmp/cfd/cfd.zip ${{ steps.asset_name.outputs.ASSET_NAME }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}

  upload-object-macos:
    name: upload-object-macos
    needs: create_releases
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        xcode: ['12.5.1', '13.2.1', '13.4.1', '14.2', '14.3.1']
        shared: [on, off]
        include:
          - xcode: '12.5.1'
            os: macos-11
          - xcode: '13.2.1'
            os: macos-11
          - xcode: '13.4.1'
            os: macos-12
          - xcode: '14.2'
            os: macos-12
          - xcode: '14.3.1'
            os: macos-13
          - shared: on
            suffix: ''
          - shared: off
            suffix: '-static'

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Get the asset name
        id: asset_name
        run: echo "ASSET_NAME=cfdgo-${{ steps.get_version.outputs.VERSION }}-osx-xcode${{ matrix.xcode }}${{ matrix.suffix }}-x86_64.zip" >> $GITHUB_OUTPUT
        shell: bash
      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer'
      - name: Show Xcode version
        run: xcodebuild -version
      - name: cmake-build
        run: |
          mkdir dist
          mkdir build
          cd build
          cmake .. -DENABLE_SHARED=${{ matrix.shared }} -DENABLE_TESTS=off -DENABLE_JS_WRAPPER=off -DCMAKE_BUILD_TYPE=Release -DTARGET_RPATH="/usr/local/lib;@executable_path;./build/Release"
          cd ..
          cmake --build build --parallel 2 --config Release
          cd build
          sudo make install DESTDIR=../dist
          cd ..
        timeout-minutes: 30
      - name: create archive file
        run: |
          cd dist
          zip -r ../${{ steps.asset_name.outputs.ASSET_NAME }} usr
          echo "---- dump zip file ----"
          ls -l
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset_name.outputs.ASSET_NAME }}
