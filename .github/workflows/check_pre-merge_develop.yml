name: develop pre-merge check

on:
  push:
    branches:
      - develop
      - dev_v[0-9]+
    paths-ignore:
      - 'README.md'
      - '*.dockerfile'
      - '*.json'
      - 'LICENSE'
      - 'pc/**'
  pull_request:
    branches:
      - develop
      - dev_v[0-9]+

jobs:
  cmake-build:
    name: cmake build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-12, macos-11, windows-2022, windows-2019, ubuntu-22.04, ubuntu-20.04]
        go-version: ['~1.19', '~1.20', '~1.21']
        exclude:
          - os: windows-2019
            go-version: '~1.19'

    steps:
      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: cmake-generate-windows
        if: runner.os == 'Windows'
        run: cmake -S . -B build -G "MSYS Makefiles" -DENABLE_SHARED=on -DENABLE_TESTS=off -DTARGET_RPATH="/usr/local/lib;/usr/local/lib64;./build/Release"
      - name: cmake-generate
        if: runner.os != 'Windows'
        run: cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=on -DENABLE_TESTS=off -DTARGET_RPATH="/usr/local/lib;/usr/local/lib64;./build/Release"
      - name: cmake-build
        run: |
          cmake --version
          cmake --build build --config Release --parallel 2
      - name: go-mod
        run: go mod download
      - name: go-build
        run: go build
      - name: go_test-windows
        if: runner.os == 'Windows'
        run: .\go_test.bat
      - name: go_test-mac
        if: runner.os == 'macOS'
        run: |
          cd build
          sudo make install
          cd ..
          ./go_test_installed.sh
      - name: go_test-ubuntu
        if: runner.os == 'Linux'
        run: ./go_test.sh
      - name: golangci-lint
        if: matrix.os == 'ubuntu-22.04'
        uses: reviewdog/action-golangci-lint@v2
